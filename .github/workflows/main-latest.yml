name: main-latest

on:
  push:
    branches: [ main ]

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildxarch-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildxarch-

      - name: Prepare
        id: prep
        run: |
          echo ::set-output name=created::$(date -u +'%Y%m%d-%H%M')

      - name: Build amd64
        id: docker_build_amd64
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          load: true
          push: false
          tags: k8s-worker-containerd:amd64
          cache-from: type=local,src=/tmp/.buildx-cache/release
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache/release
          build-args: |
            PACKAGE_VERSION=${{ steps.prep.outputs.created }}
            OS_ARCH=amd64

      - name: Extract artifacts from amd64 docker build
        run: docker cp $(docker create --rm k8s-worker-containerd:amd64):/out ./

      - name: Cache Docker layers arm64
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache-arm64
          key: ${{ runner.os }}-buildxarch-arm64-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildxarch-arm64-

      - name: Build arm64
        id: docker_build_arm64
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/arm64
          load: true
          push: false
          tags: k8s-worker-containerd:arm64
          cache-from: type=local,src=/tmp/.buildx-cache-arm64/release
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-arm64/release
          build-args: |
            PACKAGE_VERSION=${{ steps.prep.outputs.created }}
            OS_ARCH=arm64

      - name: Extract artifacts from arm64 docker build
        run: docker cp $(docker create --rm k8s-worker-containerd:arm64):/out ./

      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Latest release"
          files: |
            out/*.deb
            out/*.tar.gz
